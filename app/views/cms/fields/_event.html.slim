
- categories = Event.categories.map { |k, v| [translate_enum_value(Event, :category, k), k] }
- languages = I18nData.languages(I18n.locale).map { |k,v| [v.split(/[,;]/)[0], k] }

= f.input :published

= f.input :venue do
  .hint = @record.venue.name ? "#{@record.venue.name} - #{@record.venue.full_address}" : @record.venue.full_address

= f.input :name, placeholder: @record.category_name
= f.input :category, collection: categories
= f.input :description, as: :text, placeholder: @record.category_description
= f.input :room, hint: translate('cms.hints.event.room')
= f.input :language, collection: languages, selected: @record.language || I18n.locale.upcase, input_html: { class: 'search' }, hint: translate('cms.hints.event.language')

= f.input :disable_notifications, hint: translate('cms.hints.event.disable_notifications')

.ui.divider

= f.input :registration_mode, collection: Event.registration_modes.map { |k, v| [translate_enum_value(Event, :registration_mode, k), k] }, hint: translate('cms.hints.event.registration_mode', native: translate_enum_value(@record, :registration_mode, :native))
= f.input :registration_url, as: :url, hint: translate('cms.hints.event.registration_url', native: translate_enum_value(@record, :registration_mode, :native))

.ui.divider

= f.input :recurrence, collection: Event.recurrences.map { |k, v| [translate_enum_value(Event, :recurrence, k), k] }

.two.fields
  = f.input :start_date, as: :string, wrapper: :semantic_date, wrapper_html: { class: 'start' }
  = f.input :end_date, as: :string, wrapper: :semantic_date, wrapper_html: { class: 'end' }, input_html: { placeholder: translate('cms.hints.never') }

.two.fields
  = f.input :start_time, wrapper_html: { class: 'start' }, input_html: { type: 'time', autocomplete: 'off' }
  = f.input :end_time, wrapper_html: { class: 'end' }, input_html: { type: 'time', autocomplete: 'off', placeholder: translate('cms.hints.unspecified') }
