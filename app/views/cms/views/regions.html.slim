ruby:
  if @context.is_a?(Country)
    regions_type = @context.enable_province_management? ? :regions : :cities
  else
    regions_type = @context.present? ? :cities : :countries
  end
  
  allow = @context ? policy(@context) : policy(:dashboard)
  title = translate(regions_type, scope: %i[cms menu regions])
  content_for :title, [title, @context&.label].compact.join(' | ')

= render 'cms/views/context' do
  - if @countries
    h3.ui.dividing.header
      - if allow.new_association?(:countries) && policy(Country).new?
        = floating_action translate('cms.actions.target.new', resource: translate_model(Country)), 'plus', url_for([:new, :cms, :country])
      .content = translate_model(Country, :plural)

    - if @countries.present?
      .ui.list
        = render partial: 'cms/list_items/country', collection: @countries, cached: true
    - else
      p = translate('cms.messages.no_records_found', resources: translate_model(Country, :plural).downcase)

  - if @provinces
    h3.ui.dividing.header
      - if allow.new_association?(:provinces) && policy(Province).new?
        = floating_action translate('cms.regions.new_province'), 'plus', url_for([:new, :cms, @context, :province])
      .content = translate('cms.regions.provinces_header')

    - if @provinces.present?
      .ui.list
        = render partial: 'cms/list_items/province', collection: @provinces, cached: true
    - else
      p = translate('cms.messages.no_records_found', resources: translate_model(Province, :plural).downcase)

  - if @local_areas
    h3.ui.dividing.header
      - if @context
        - if allow.new_association?(:local_areas) && policy(LocalArea).new?
          = floating_action translate('cms.actions.target.new', resource: translate_model(LocalArea)), 'plus', url_for([:new, :cms, @context, :local_area])
        .content
          - if @context.is_a?(Province) || @context.is_a?(Country) && !@context.enable_province_management?
            = translate('cms.regions.local_areas_header.provincial')
          - else
            = translate('cms.regions.local_areas_header.national')
      - else
        - if allow.new_association?(:local_areas) && policy(LocalArea).new?
          = floating_action translate('cms.actions.target.new', resource: translate_model(LocalArea)), 'plus', url_for([:new, :cms, :local_area])
        .content = translate('cms.regions.local_areas_header.global')

    - if @local_areas.present?
      .ui.list
        = render partial: 'cms/list_items/local_area', collection: @local_areas, cached: true
    - else
      p = translate('cms.messages.no_records_found', resources: translate_model(LocalArea, :plural).downcase)
